//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 12/12/2015 11:39:27 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Reflection;
using System.Linq.Expressions;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects;
using System.Data.Objects.DataClasses;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("DeepFrostModel", "FK_SocialNetworkId", "Socialnetwork", RelationshipMultiplicity.One, typeof(DeepFrostModel.Socialnetwork), "Socialnetworkmappings", RelationshipMultiplicity.Many, typeof(DeepFrostModel.Socialnetworkmapping), true)]
[assembly: EdmRelationshipAttribute("DeepFrostModel", "FK_UserId", "User1", RelationshipMultiplicity.One, typeof(DeepFrostModel.User), "Socialnetworkmappings", RelationshipMultiplicity.Many, typeof(DeepFrostModel.Socialnetworkmapping), true)]
[assembly: EdmRelationshipAttribute("DeepFrostModel", "User_AccountRole", "Accountrole", RelationshipMultiplicity.One, typeof(DeepFrostModel.Accountrole), "Users", RelationshipMultiplicity.Many, typeof(DeepFrostModel.User), true)]
[assembly: EdmRelationshipAttribute("DeepFrostModel", "UserIdUserData", "User", RelationshipMultiplicity.One, typeof(DeepFrostModel.User), "Userdatas", RelationshipMultiplicity.Many, typeof(DeepFrostModel.Userdata), true)]
[assembly: EdmRelationshipAttribute("DeepFrostModel", "Class_Program", "Classes", RelationshipMultiplicity.Many, typeof(DeepFrostModel.Class), "Programs", RelationshipMultiplicity.Many, typeof(DeepFrostModel.Program))]
[assembly: EdmRelationshipAttribute("DeepFrostModel", "Program_User", "Programs", RelationshipMultiplicity.Many, typeof(DeepFrostModel.Program), "Users", RelationshipMultiplicity.Many, typeof(DeepFrostModel.User))]

#endregion

namespace DeepFrostModel
{

    #region DeepFrostEntities

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class DeepFrostEntities : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new DeepFrostEntities object.
        /// </summary>
        public DeepFrostEntities() : 
                base(@"name=DeepFrostEntitiesConnectionString", "DeepFrostEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new DeepFrostEntities object using the connection string found in the 'DeepFrostEntities' section of the application configuration file.
        /// </summary>
        public DeepFrostEntities(string connectionString) : 
                base(connectionString, "DeepFrostEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new DeepFrostEntities object.
        /// </summary>
        public DeepFrostEntities(EntityConnection connection) : base(connection, "DeepFrostEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Accountrole> Accountroles
        {
            get
            {
                if ((_Accountroles == null))
                {
                    _Accountroles = base.CreateObjectSet<Accountrole>("Accountroles");
                }
                return _Accountroles;
            }
        }
        private ObjectSet<Accountrole> _Accountroles;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Class> Classes
        {
            get
            {
                if ((_Classes == null))
                {
                    _Classes = base.CreateObjectSet<Class>("Classes");
                }
                return _Classes;
            }
        }
        private ObjectSet<Class> _Classes;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Program> Programs
        {
            get
            {
                if ((_Programs == null))
                {
                    _Programs = base.CreateObjectSet<Program>("Programs");
                }
                return _Programs;
            }
        }
        private ObjectSet<Program> _Programs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Socialnetwork> Socialnetworks
        {
            get
            {
                if ((_Socialnetworks == null))
                {
                    _Socialnetworks = base.CreateObjectSet<Socialnetwork>("Socialnetworks");
                }
                return _Socialnetworks;
            }
        }
        private ObjectSet<Socialnetwork> _Socialnetworks;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Socialnetworkmapping> Socialnetworkmappings
        {
            get
            {
                if ((_Socialnetworkmappings == null))
                {
                    _Socialnetworkmappings = base.CreateObjectSet<Socialnetworkmapping>("Socialnetworkmappings");
                }
                return _Socialnetworkmappings;
            }
        }
        private ObjectSet<Socialnetworkmapping> _Socialnetworkmappings;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Userdata> Userdatas
        {
            get
            {
                if ((_Userdatas == null))
                {
                    _Userdatas = base.CreateObjectSet<Userdata>("Userdatas");
                }
                return _Userdatas;
            }
        }
        private ObjectSet<Userdata> _Userdatas;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the Accountroles EntitySet.
        /// </summary>
        public void AddToAccountroles(Accountrole accountrole)
        {
            base.AddObject("Accountroles", accountrole);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Classes EntitySet.
        /// </summary>
        public void AddToClasses(Class @class)
        {
            base.AddObject("Classes", @class);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Programs EntitySet.
        /// </summary>
        public void AddToPrograms(Program program)
        {
            base.AddObject("Programs", program);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Socialnetworks EntitySet.
        /// </summary>
        public void AddToSocialnetworks(Socialnetwork socialnetwork)
        {
            base.AddObject("Socialnetworks", socialnetwork);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Socialnetworkmappings EntitySet.
        /// </summary>
        public void AddToSocialnetworkmappings(Socialnetworkmapping socialnetworkmapping)
        {
            base.AddObject("Socialnetworkmappings", socialnetworkmapping);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Userdatas EntitySet.
        /// </summary>
        public void AddToUserdatas(Userdata userdata)
        {
            base.AddObject("Userdatas", userdata);
        }

        #endregion
    }

    #endregion
}

namespace DeepFrostModel
{

    /// <summary>
    /// There are no comments for DeepFrostModel.Accountrole in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="DeepFrostModel", Name="Accountrole")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Accountrole : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Accountrole object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="role">Initial value of Role.</param>
        public static Accountrole CreateAccountrole(int id, string role)
        {
            Accountrole accountrole = new Accountrole();
            accountrole.Id = id;
            accountrole.Role = role;
            return accountrole;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Role
        {
            get
            {
                string value = _Role;
                OnGetRole(ref value);
                return value;
            }
            set
            {
                if (_Role != value)
                {
                  OnRoleChanging(ref value);
                  ReportPropertyChanging("Role");
                  _Role = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Role");
                  OnRoleChanged();
              }
            }
        }
        private string _Role;
        partial void OnGetRole(ref string value);
        partial void OnRoleChanging(ref string value);
        partial void OnRoleChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DeepFrostModel", "User_AccountRole", "Users")]
        public EntityCollection<User> Users
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<User>("DeepFrostModel.User_AccountRole", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<User>("DeepFrostModel.User_AccountRole", "Users", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for DeepFrostModel.Class in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="DeepFrostModel", Name="Class")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Class : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Class object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static Class CreateClass(int id)
        {
            Class @class = new Class();
            @class.Id = id;
            return @class;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Programs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DeepFrostModel", "Class_Program", "Programs")]
        public EntityCollection<Program> Programs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Program>("DeepFrostModel.Class_Program", "Programs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Program>("DeepFrostModel.Class_Program", "Programs", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for DeepFrostModel.Program in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="DeepFrostModel", Name="Program")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Program : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Program object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static Program CreateProgram(int id)
        {
            Program program = new Program();
            program.Id = id;
            return program;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Classes in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DeepFrostModel", "Class_Program", "Classes")]
        public EntityCollection<Class> Classes
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Class>("DeepFrostModel.Class_Program", "Classes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Class>("DeepFrostModel.Class_Program", "Classes", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DeepFrostModel", "Program_User", "Users")]
        public EntityCollection<User> Users
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<User>("DeepFrostModel.Program_User", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<User>("DeepFrostModel.Program_User", "Users", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for DeepFrostModel.Socialnetwork in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="DeepFrostModel", Name="Socialnetwork")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Socialnetwork : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Socialnetwork object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="socialNetwork">Initial value of SocialNetwork.</param>
        /// <param name="url">Initial value of Url.</param>
        /// <param name="networkProvider">Initial value of NetworkProvider.</param>
        /// <param name="available">Initial value of Available.</param>
        public static Socialnetwork CreateSocialnetwork(int id, string socialNetwork, string url, string networkProvider, sbyte available)
        {
            Socialnetwork socialnetwork = new Socialnetwork();
            socialnetwork.Id = id;
            socialnetwork.SocialNetwork = socialNetwork;
            socialnetwork.Url = url;
            socialnetwork.NetworkProvider = networkProvider;
            socialnetwork.Available = available;
            return socialnetwork;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for SocialNetwork in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string SocialNetwork
        {
            get
            {
                string value = _SocialNetwork;
                OnGetSocialNetwork(ref value);
                return value;
            }
            set
            {
                if (_SocialNetwork != value)
                {
                  OnSocialNetworkChanging(ref value);
                  ReportPropertyChanging("SocialNetwork");
                  _SocialNetwork = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("SocialNetwork");
                  OnSocialNetworkChanged();
              }
            }
        }
        private string _SocialNetwork;
        partial void OnGetSocialNetwork(ref string value);
        partial void OnSocialNetworkChanging(ref string value);
        partial void OnSocialNetworkChanged();
    
        /// <summary>
        /// There are no comments for Url in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Url
        {
            get
            {
                string value = _Url;
                OnGetUrl(ref value);
                return value;
            }
            set
            {
                if (_Url != value)
                {
                  OnUrlChanging(ref value);
                  ReportPropertyChanging("Url");
                  _Url = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Url");
                  OnUrlChanged();
              }
            }
        }
        private string _Url;
        partial void OnGetUrl(ref string value);
        partial void OnUrlChanging(ref string value);
        partial void OnUrlChanged();
    
        /// <summary>
        /// There are no comments for NetworkProvider in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string NetworkProvider
        {
            get
            {
                string value = _NetworkProvider;
                OnGetNetworkProvider(ref value);
                return value;
            }
            set
            {
                if (_NetworkProvider != value)
                {
                  OnNetworkProviderChanging(ref value);
                  ReportPropertyChanging("NetworkProvider");
                  _NetworkProvider = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("NetworkProvider");
                  OnNetworkProviderChanged();
              }
            }
        }
        private string _NetworkProvider;
        partial void OnGetNetworkProvider(ref string value);
        partial void OnNetworkProviderChanging(ref string value);
        partial void OnNetworkProviderChanged();
    
        /// <summary>
        /// There are no comments for Available in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public sbyte Available
        {
            get
            {
                sbyte value = _Available;
                OnGetAvailable(ref value);
                return value;
            }
            set
            {
                if (_Available != value)
                {
                  OnAvailableChanging(ref value);
                  ReportPropertyChanging("Available");
                  _Available = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Available");
                  OnAvailableChanged();
              }
            }
        }
        private sbyte _Available;
        partial void OnGetAvailable(ref sbyte value);
        partial void OnAvailableChanging(ref sbyte value);
        partial void OnAvailableChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Socialnetworkmappings in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DeepFrostModel", "FK_SocialNetworkId", "Socialnetworkmappings")]
        public EntityCollection<Socialnetworkmapping> Socialnetworkmappings
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Socialnetworkmapping>("DeepFrostModel.FK_SocialNetworkId", "Socialnetworkmappings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Socialnetworkmapping>("DeepFrostModel.FK_SocialNetworkId", "Socialnetworkmappings", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for DeepFrostModel.Socialnetworkmapping in the schema.
    /// </summary>
    /// <KeyProperties>
    /// User
    /// SocialNetwork
    /// SocialNetworkAccount
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="DeepFrostModel", Name="Socialnetworkmapping")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Socialnetworkmapping : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Socialnetworkmapping object.
        /// </summary>
        /// <param name="user">Initial value of User.</param>
        /// <param name="socialNetwork">Initial value of SocialNetwork.</param>
        /// <param name="socialNetworkAccount">Initial value of SocialNetworkAccount.</param>
        /// <param name="mainAccount">Initial value of MainAccount.</param>
        public static Socialnetworkmapping CreateSocialnetworkmapping(int user, int socialNetwork, string socialNetworkAccount, sbyte mainAccount)
        {
            Socialnetworkmapping socialnetworkmapping = new Socialnetworkmapping();
            socialnetworkmapping.User = user;
            socialnetworkmapping.SocialNetwork = socialNetwork;
            socialnetworkmapping.SocialNetworkAccount = socialNetworkAccount;
            socialnetworkmapping.MainAccount = mainAccount;
            return socialnetworkmapping;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int User
        {
            get
            {
                int value = _User;
                OnGetUser(ref value);
                return value;
            }
            set
            {
                if (_User != value)
                {
                  OnUserChanging(ref value);
                  ReportPropertyChanging("User");
                  _User = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("User");
                  OnUserChanged();
              }
            }
        }
        private int _User;
        partial void OnGetUser(ref int value);
        partial void OnUserChanging(ref int value);
        partial void OnUserChanged();
    
        /// <summary>
        /// There are no comments for SocialNetwork in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int SocialNetwork
        {
            get
            {
                int value = _SocialNetwork;
                OnGetSocialNetwork(ref value);
                return value;
            }
            set
            {
                if (_SocialNetwork != value)
                {
                  OnSocialNetworkChanging(ref value);
                  ReportPropertyChanging("SocialNetwork");
                  _SocialNetwork = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("SocialNetwork");
                  OnSocialNetworkChanged();
              }
            }
        }
        private int _SocialNetwork;
        partial void OnGetSocialNetwork(ref int value);
        partial void OnSocialNetworkChanging(ref int value);
        partial void OnSocialNetworkChanged();
    
        /// <summary>
        /// There are no comments for SocialNetworkAccount in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public string SocialNetworkAccount
        {
            get
            {
                string value = _SocialNetworkAccount;
                OnGetSocialNetworkAccount(ref value);
                return value;
            }
            set
            {
                if (_SocialNetworkAccount != value)
                {
                  OnSocialNetworkAccountChanging(ref value);
                  ReportPropertyChanging("SocialNetworkAccount");
                  _SocialNetworkAccount = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("SocialNetworkAccount");
                  OnSocialNetworkAccountChanged();
              }
            }
        }
        private string _SocialNetworkAccount;
        partial void OnGetSocialNetworkAccount(ref string value);
        partial void OnSocialNetworkAccountChanging(ref string value);
        partial void OnSocialNetworkAccountChanged();
    
        /// <summary>
        /// There are no comments for MainAccount in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public sbyte MainAccount
        {
            get
            {
                sbyte value = _MainAccount;
                OnGetMainAccount(ref value);
                return value;
            }
            set
            {
                if (_MainAccount != value)
                {
                  OnMainAccountChanging(ref value);
                  ReportPropertyChanging("MainAccount");
                  _MainAccount = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("MainAccount");
                  OnMainAccountChanged();
              }
            }
        }
        private sbyte _MainAccount;
        partial void OnGetMainAccount(ref sbyte value);
        partial void OnMainAccountChanging(ref sbyte value);
        partial void OnMainAccountChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Socialnetwork in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DeepFrostModel", "FK_SocialNetworkId", "Socialnetwork")]
        public Socialnetwork Socialnetwork
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Socialnetwork>("DeepFrostModel.FK_SocialNetworkId", "Socialnetwork").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Socialnetwork>("DeepFrostModel.FK_SocialNetworkId", "Socialnetwork").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Socialnetwork in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Socialnetwork> SocialnetworkReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Socialnetwork>("DeepFrostModel.FK_SocialNetworkId", "Socialnetwork");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Socialnetwork>("DeepFrostModel.FK_SocialNetworkId", "Socialnetwork", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Socialnetwork>("DeepFrostModel.FK_SocialNetworkId", "Socialnetwork").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for User1 in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DeepFrostModel", "FK_UserId", "User1")]
        public User User1
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("DeepFrostModel.FK_UserId", "User1").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("DeepFrostModel.FK_UserId", "User1").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for User1 in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> User1Reference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("DeepFrostModel.FK_UserId", "User1");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<User>("DeepFrostModel.FK_UserId", "User1", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("DeepFrostModel.FK_UserId", "User1").Value = null;
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for DeepFrostModel.User in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="DeepFrostModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="accountName">Initial value of AccountName.</param>
        /// <param name="password">Initial value of Password.</param>
        /// <param name="accountRole">Initial value of AccountRole.</param>
        /// <param name="displayName">Initial value of DisplayName.</param>
        public static User CreateUser(int id, string accountName, string password, int accountRole, string displayName)
        {
            User user = new User();
            user.Id = id;
            user.AccountName = accountName;
            user.Password = password;
            user.AccountRole = accountRole;
            user.DisplayName = displayName;
            return user;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for AccountName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string AccountName
        {
            get
            {
                string value = _AccountName;
                OnGetAccountName(ref value);
                return value;
            }
            set
            {
                if (_AccountName != value)
                {
                  OnAccountNameChanging(ref value);
                  ReportPropertyChanging("AccountName");
                  _AccountName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("AccountName");
                  OnAccountNameChanged();
              }
            }
        }
        private string _AccountName;
        partial void OnGetAccountName(ref string value);
        partial void OnAccountNameChanging(ref string value);
        partial void OnAccountNameChanged();
    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Password
        {
            get
            {
                string value = _Password;
                OnGetPassword(ref value);
                return value;
            }
            set
            {
                if (_Password != value)
                {
                  OnPasswordChanging(ref value);
                  ReportPropertyChanging("Password");
                  _Password = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Password");
                  OnPasswordChanged();
              }
            }
        }
        private string _Password;
        partial void OnGetPassword(ref string value);
        partial void OnPasswordChanging(ref string value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// There are no comments for AccountRole in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int AccountRole
        {
            get
            {
                int value = _AccountRole;
                OnGetAccountRole(ref value);
                return value;
            }
            set
            {
                if (_AccountRole != value)
                {
                  OnAccountRoleChanging(ref value);
                  ReportPropertyChanging("AccountRole");
                  _AccountRole = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("AccountRole");
                  OnAccountRoleChanged();
              }
            }
        }
        private int _AccountRole;
        partial void OnGetAccountRole(ref int value);
        partial void OnAccountRoleChanging(ref int value);
        partial void OnAccountRoleChanged();
    
        /// <summary>
        /// There are no comments for DisplayName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string DisplayName
        {
            get
            {
                string value = _DisplayName;
                OnGetDisplayName(ref value);
                return value;
            }
            set
            {
                if (_DisplayName != value)
                {
                  OnDisplayNameChanging(ref value);
                  ReportPropertyChanging("DisplayName");
                  _DisplayName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("DisplayName");
                  OnDisplayNameChanged();
              }
            }
        }
        private string _DisplayName;
        partial void OnGetDisplayName(ref string value);
        partial void OnDisplayNameChanging(ref string value);
        partial void OnDisplayNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Socialnetworkmappings in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DeepFrostModel", "FK_UserId", "Socialnetworkmappings")]
        public EntityCollection<Socialnetworkmapping> Socialnetworkmappings
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Socialnetworkmapping>("DeepFrostModel.FK_UserId", "Socialnetworkmappings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Socialnetworkmapping>("DeepFrostModel.FK_UserId", "Socialnetworkmappings", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for Accountrole in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DeepFrostModel", "User_AccountRole", "Accountrole")]
        public Accountrole Accountrole
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Accountrole>("DeepFrostModel.User_AccountRole", "Accountrole").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Accountrole>("DeepFrostModel.User_AccountRole", "Accountrole").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Accountrole in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Accountrole> AccountroleReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Accountrole>("DeepFrostModel.User_AccountRole", "Accountrole");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Accountrole>("DeepFrostModel.User_AccountRole", "Accountrole", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Accountrole>("DeepFrostModel.User_AccountRole", "Accountrole").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for Userdatas in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DeepFrostModel", "UserIdUserData", "Userdatas")]
        public EntityCollection<Userdata> Userdatas
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Userdata>("DeepFrostModel.UserIdUserData", "Userdatas");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Userdata>("DeepFrostModel.UserIdUserData", "Userdatas", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for Programs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DeepFrostModel", "Program_User", "Programs")]
        public EntityCollection<Program> Programs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Program>("DeepFrostModel.Program_User", "Programs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Program>("DeepFrostModel.Program_User", "Programs", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for DeepFrostModel.Userdata in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="DeepFrostModel", Name="Userdata")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Userdata : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Userdata object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="userId">Initial value of UserId.</param>
        public static Userdata CreateUserdata(int id, int userId)
        {
            Userdata userdata = new Userdata();
            userdata.Id = id;
            userdata.UserId = userId;
            return userdata;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                string value = _FirstName;
                OnGetFirstName(ref value);
                return value;
            }
            set
            {
                if (_FirstName != value)
                {
                  OnFirstNameChanging(ref value);
                  ReportPropertyChanging("FirstName");
                  _FirstName = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("FirstName");
                  OnFirstNameChanged();
              }
            }
        }
        private string _FirstName;
        partial void OnGetFirstName(ref string value);
        partial void OnFirstNameChanging(ref string value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string LastName
        {
            get
            {
                string value = _LastName;
                OnGetLastName(ref value);
                return value;
            }
            set
            {
                if (_LastName != value)
                {
                  OnLastNameChanging(ref value);
                  ReportPropertyChanging("LastName");
                  _LastName = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("LastName");
                  OnLastNameChanged();
              }
            }
        }
        private string _LastName;
        partial void OnGetLastName(ref string value);
        partial void OnLastNameChanging(ref string value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// There are no comments for FacultyNumber in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string FacultyNumber
        {
            get
            {
                string value = _FacultyNumber;
                OnGetFacultyNumber(ref value);
                return value;
            }
            set
            {
                if (_FacultyNumber != value)
                {
                  OnFacultyNumberChanging(ref value);
                  ReportPropertyChanging("FacultyNumber");
                  _FacultyNumber = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("FacultyNumber");
                  OnFacultyNumberChanged();
              }
            }
        }
        private string _FacultyNumber;
        partial void OnGetFacultyNumber(ref string value);
        partial void OnFacultyNumberChanging(ref string value);
        partial void OnFacultyNumberChanged();
    
        /// <summary>
        /// There are no comments for EGN in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string EGN
        {
            get
            {
                string value = _EGN;
                OnGetEGN(ref value);
                return value;
            }
            set
            {
                if (_EGN != value)
                {
                  OnEGNChanging(ref value);
                  ReportPropertyChanging("EGN");
                  _EGN = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("EGN");
                  OnEGNChanged();
              }
            }
        }
        private string _EGN;
        partial void OnGetEGN(ref string value);
        partial void OnEGNChanging(ref string value);
        partial void OnEGNChanged();
    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int UserId
        {
            get
            {
                int value = _UserId;
                OnGetUserId(ref value);
                return value;
            }
            set
            {
                if (_UserId != value)
                {
                  OnUserIdChanging(ref value);
                  ReportPropertyChanging("UserId");
                  _UserId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("UserId");
                  OnUserIdChanged();
              }
            }
        }
        private int _UserId;
        partial void OnGetUserId(ref int value);
        partial void OnUserIdChanging(ref int value);
        partial void OnUserIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DeepFrostModel", "UserIdUserData", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("DeepFrostModel.UserIdUserData", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("DeepFrostModel.UserIdUserData", "User").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("DeepFrostModel.UserIdUserData", "User");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<User>("DeepFrostModel.UserIdUserData", "User", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("DeepFrostModel.UserIdUserData", "User").Value = null;
                }
            }
        }

        #endregion
    }

}
